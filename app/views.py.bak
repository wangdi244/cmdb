#encoding=utf-8
# Create your views here.
from django.http import HttpResponse,HttpResponseRedirect
from django.shortcuts import render_to_response,render
from django.template import Template,loader,RequestContext
from django.contrib import auth
from django import  forms
from app.models import *
from app.backend.saltapi  import SaltAPI
from app.backend.asset_info import *
import  ConfigParser,sys,json,os
def saltstack():
    config = ConfigParser.ConfigParser()  
    config.read("/web/CMDB/app/backend/config.ini")
    url = config.get("saltstack","url")
    user = config.get("saltstack","user")
    passwd = config.get("saltstack","pass")
    result_api={'url':url,'user':user,'passwd':passwd}
    return result_api
def index(request): 
    return render_to_response("index.html")
def login(request):
    return render_to_response("login.html")
def authin(request):
    username = request.POST.get('username','')
    password = request.POST.get('password','')
    user = auth.authenticate(username=username,password=password)
    if user is not None:
            auth.login(request,user)
            return render_to_response('index.html',{'login_user':request.user})
    else:
            return render_to_response('login.html',{'login_err':'Wrong username or password'})
def idc(request):
    all_idc = Idc.objects.all()
    return render_to_response("idc.html",locals())
def addidc(request):
    nameInput = request.GET['nameInput'] 
    msgInput = request.GET['msgInput'] 
    idc_add = Idc(idc_name=nameInput,remark=msgInput)
    idc_add.save()
    return HttpResponse('ok')
def idc_delete(request,id=None):
    if request.method == 'GET':
        id = request.GET.get('id')
        Idc.objects.filter(id=id).delete()
        return HttpResponseRedirect('/idc/')
def mac(request):
    all_host = HostList.objects.all()
    all_idc = Idc.objects.all()
    return render_to_response("mac.html",locals())
def addmac(request):
    if request.method == 'GET':
        name = request.GET['name']
        ip = request.GET['ip'] 
        idc_name = request.GET['idc_name']
        service = request.GET['service']
        idc_bh = request.GET['idc_jg'] 
        mac_add = HostList(ip=ip,hostname=name,application=service,idc_name=idc_name,bianhao=idc_bh) 
        mac_add.save()
        return HttpResponse('ok')
def mac_delete(request,id=None):
    if request.method == 'GET':
        id = request.GET.get('id')
        HostList.objects.filter(id=id).delete()
        return HttpResponseRedirect('/mac/')
def mac_edit(request,id=None):   
    if request.method == 'GET':
	id = request.GET.get('id')
	all_idc = Idc.objects.all()
        all_host=HostList.objects.filter(id=id)
	return render_to_response("mac_edit.html",locals())
def macresult(request):
    if request.method =='GET':
        id = request.GET['id']
        ip = request.GET['ip']
        name = request.GET['name']
        idc_name = request.GET['idc_name']
        service = request.GET['service']
        idc_bh = request.GET['idc_jg']
        try:
            mac_update = HostList.objects.filter(id=id).update(ip=ip,hostname=name,application=service,idc_name=idc_name,bianhao=idc_bh)
            mac_update.save()
	except:
	    print "get exception"
	finally: 
            return HttpResponse('ok') 
class UploadForm(forms.Form):
    headImg = forms.FileField()
def file(request):
#    if request.method == 'POST':
    all_group = Group.objects.all()
    all_file = Upload.objects.all()
    uf = UploadForm(request.POST,request.FILES)
    if uf.is_valid():
        headImg = uf.cleaned_data['headImg']
        user = Upload()
        user.headImg = headImg
        user.save()
    return render_to_response('file.html',locals())
#    else:
#        uf = UserForm()
#        return render_to_response('file.html',{'uf':uf})  
def file_result(request):
    if request.method == 'GET':
	import sys
	reload(sys)
	sys.setdefaultencoding( "utf-8" )
	g_name = request.GET.get('g_name')
	file = request.GET.get('file')
	dir = request.GET.get('dir')
	GroupList = Group.objects.all()
	file_result = []
	for groupname in GroupList:
            if groupname.name in g_name:
                print "slected group:",groupname.name
                for selected_ip in HostList.objects.filter(group__name = groupname.name):
                    host = HostList.objects.filter(ip=selected_ip.ip)
                    for host in host:
			key_id = host.hostname
			cmd = "salt %s cp.get_file salt://%s %s"%(key_id,file,dir)
     			result = os.popen(cmd).read()
			key_id = {'host':key_id,'ret':result}
			file_result.append(key_id)
		data = json.dumps(file_result)
#		print data
		return HttpResponse(data)
def command(request):
    if request.method == 'GET':
	all_host = HostList.objects.all()
    return render_to_response("command.html",locals())
def command_result(request):
    if request.method == 'GET':
	ret_api = saltstack()
	ip = request.GET.get('ip')
	command = request.GET.get('command')
	host = HostList.objects.filter(ip=ip)
	for host in host:
	    key_id = host.hostname
	    sapi = SaltAPI(url=ret_api["url"],username=ret_api["user"],password=ret_api["passwd"])
	    ret = sapi.remote_execution(key_id,'cmd.run',command) 
	    r_data = {'host':key_id,'ret':ret}
	    data = json.dumps(r_data)
#	    print data
	    return HttpResponse(data)
def command_group(request):
    if request.method == 'GET':
	all_group = Group.objects.all()
    return render_to_response("command_group.html",locals())
def command_group_result(request):
    if request.method == 'GET':
	ret_api = saltstack()
        g_name = request.GET.get('g_name')
        command = request.GET.get('command')
        selectIps = []
        result = []
        GroupList = Group.objects.all()
        for groupname in GroupList:
            if groupname.name in g_name:
                print "slected group:",groupname.name
                for selected_ip in HostList.objects.filter(group__name = groupname.name):
                    host = HostList.objects.filter(ip=selected_ip.ip)
                    for host in host:
                        key_id = host.hostname 
                        sapi = SaltAPI(url=ret_api["url"],username=ret_api["user"],password=ret_api["passwd"])
                        ret = sapi.remote_execution(key_id,'cmd.run',command)
                        key_id = {'host':key_id,'ret':ret}
                        result.append(key_id)
                data = json.dumps(result)
#                print data
                return HttpResponse(data)
def job(request):
    return render_to_response("job.html")
def asset(request):
    all_asset = ServerAsset.objects.all()    
    return render_to_response("asset.html",locals())
def asset_auto(request):
    all_host = HostList.objects.all()
    return render_to_response("asset_auto.html",locals())
def asset_auto_result(request):
     if request.method == 'GET':
	ret_api = saltstack()
	try:
	    client = request.GET.get('client')
            result = get_server_asset_info(client,ret_api["url"],ret_api["user"],ret_api["passwd"]) 
            result_data = ServerAsset()
            result_data.manufacturer = result[0][0]
            result_data.productname = result[0][1]
            result_data.service_tag = result[0][2]
            result_data.cpu_model = result[0][3]
            result_data.cpu_nums = result[0][4]
            result_data.cpu_groups = result[0][5]
            result_data.mem = result[0][6]
            result_data.disk = result[0][7]
            result_data.hostname = result[0][8]
            result_data.ip = result[0][9]
            result_data.os = result[0][10]
            result_data.save() 
	except:
	    print "print check you asset"
	    return HttpResponse('ok')
	else:     
            data = json.dumps(result)       	
            return HttpResponse(data)
def asset_delete(request,id=None):
    if request.method == 'GET':
	id = request.GET.get('id')
        ServerAsset.objects.filter(id=id).delete()
	return HttpResponseRedirect('/asset/')
def group(request):
    all_group = Group.objects.all()
    return render_to_response("group.html",locals())
def group_result(request):
    if request.method == 'GET':
	group = request.GET.get('g_name')
	data = Group()
	data.name = group
	data.save()
	return HttpResponse("ok")
def group_delete(request,id=None):
    if request.method == 'GET':
        id = request.GET.get('id')
        Group.objects.filter(id=id).delete()
        return HttpResponseRedirect('/group/')
def group_manage(request,id=None):
    if request.method == 'GET':
	id = request.GET.get('id')
	group_name = Group.objects.get(id=id)	
 	all_ip = group_name.hostlist_set.all()
	all_host = HostList.objects.all()	
        return render_to_response("group_manage.html",locals())
def group_manage_delete(request,group_name=None,ip=None):
    if request.method == 'GET':
	group_name = request.GET.get('group_name')
	ip = request.GET.get('ip')
	all_group = Group.objects.filter(name=group_name)
	all_host = HostList.objects.filter(ip=ip)
	for group in all_group:
	    group_id= group.id 
	for host in all_host:
	    host_id= host.id
	h = HostList.objects.get(id=host_id)
	g = Group.objects.get(id=group_id)
	h.group.remove(g)
	return HttpResponse('ok')
def addgroup_host(request):
    if request.method == 'GET':
	group = request.GET.get('nameInput')
	ip = request.GET.get('hostInput')
	all_group = Group.objects.filter(name=group)
        all_host = HostList.objects.filter(ip=ip)
	for group in all_group:
            group_id= group.id
        for host in all_host:
            host_id= host.id
        h = HostList.objects.get(id=host_id)
        g = Group.objects.get(id=group_id)
	h.group.add(g)
	return HttpResponse('ok')
